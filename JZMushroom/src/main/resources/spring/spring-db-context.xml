<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	
	<context:component-scan base-package="com.jz.crm.base.service" />
	<context:component-scan base-package="com.jz.crm.mappers" />
	<context:component-scan base-package="com.jz.crm.services" />
	
	<bean id="propertyConfigurer" class="com.jz.crm.base.config.XPropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:jdbc.properties" />
	</bean>
	<!--配置和创建jdbc数据源 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="driver" value="${jdbc-0.proxool.driver-class}" />
		<property name="driverUrl" value="${jdbc-0.proxool.driver-url}" />
		<property name="user" value="${jdbc-0.user}" />
		<property name="password" value="${jdbc-0.password}" />
		<!-- 测试的SQL执行语句 -->
		<property name="houseKeepingTestSql" value="${jdbc-0.proxool.house-keeping-test-sql}" />
		<!-- 最少保持的空闲连接数 （默认2个） -->
		<property name="prototypeCount" value="${jdbc-0.proxool.prototypeCount}" />
		<property name="minimumConnectionCount" value="${jdbc-0.proxool.minimum-connection-count}" />
		<!-- 最大连接数 （默认5个） -->
		<property name="maximumConnectionCount" value="${jdbc-0.proxool.maximum-connection-count}" />
		<!-- 别名 -->
		<property name="alias" value="${jdbc-0.proxool.alias}" />
		<!-- proxool自动侦察各个连接状态的时间间隔(毫秒),侦察到空闲的连接就马上回收,超时的销毁 默认30秒） -->
		<!-- <property name="houseKeepingSleepTime" value="${jdbc-0.proxool.house-keeping-sleep-time}" 
			/> -->
		<!-- 最大活动时间(超过此时间线程将被kill,默认为5分钟) -->
		<!-- <property name="maximumActiveTime" value="${jdbc-0.proxool..maximumActiveTime}" 
			/> -->
		<!-- 连接最长时间(默认为4个小时) -->
		<!-- <property name="maximumConnectionLifetime" value="${jdbc-0.proxool..maximumConnectionLifetime}" 
			/> -->
		<!-- 这是我们可一次建立的最大连接数。那就是新增的连接请求,但还没有可供使用的连接。由于连接可以使用多线程,在有限的时间之间建立联系从而带来可用连接，但是我们需要通过一些方式确认一些线程并不是立即响应连接请求的，默认是10。 -->
		<property name="simultaneousBuildThrottle" value="${jdbc-0.simultaneous-build-throttle}" />
	</bean>

	<!-- myibatis配置，使其支持注解和配置文件形式 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis.xml" />
		<property name="mapperLocations" value="classpath:mapper/**/*mapper.xml" />
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> <property 
		name="basePackage" value="com.zqgame.game.base.mappers;com.zqgame.game.website.mappers" 
		/> </bean> -->

	<context:annotation-config />

	<!-- ================================事务相关控制 一================================================= -->

	<!-- 使用spring全注解方式管理申明式事务 但数据表引擎必须为InnoDB -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- ================================事务相关控制 二================================================= -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 声明使用注解式事务 -->
	<!--<tx:annotation-driven transaction-manager="transactionManager"/> -->
	<!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean 
		below) -->
	<tx:advice id="defaultTxAdvice" transaction-manager="transactionManager" >
		<tx:attributes>
			<!-- Keep SequenceService in a isolation transaction -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="enquiry*" read-only="true" />
			<tx:method name="execute*" read-only="true" />
			<tx:method name="check*" read-only="true" />
			<!-- By default, A runtime exception will rollback transaction. -->
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<aop:config  proxy-target-class="true" >
		<aop:pointcut id="service" expression="execution(* com.jz.crm.services.*Service.*(..))" />
		<aop:advisor advice-ref="defaultTxAdvice" pointcut-ref="service" />
	</aop:config>
</beans>
